swagger: "2.0"
info:
  contact:
    name: Kari Kangas (karijkangas@gmail.com)
  description: "Data consists of 3 parts: (name, email) account data, user data, and token. With extra, join may carry the original link over email."
  license:
    name: MIT
  title: Gotagsavaruus REST API
  version: 0.0.2
host: 127.0.0.1:8000
servers:
  - url: http://127.0.0.1:8000
basePath: /api
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: Token
tags:
  - name: public
    description: Public API
  - name: authorized
    description: Authorized API
  - name: debug
    description: Debug API
paths:
  /join/check:
    post:
      description: |
        Check account availability. 

        An account is available if email is not used by an existing user.
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INJoinCheck"
      produces:
        - application/json
      responses:
        "200":
          description: Account available
          schema:
            $ref: "#/definitions/OUTJoinCheck"
        "400":
          description: Invalid data
        "409":
          description: Account not available
      tags:
        - public
  /join:
    post:
      description: |
        Create a join request.

        Sends an email with a link and instructions how to verify and activate account.

        Ignored requests are purged from the database after a time-to-live (TTL) period.

        The number of pending requests is limited per email address.

        The number of requests in total within a time period is limited per email address.
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INJoin"
      produces:
        - application/json
      responses:
        "201":
          description: Join request accepted
        "400":
          description: Invalid data
        "409":
          description: Account not available
        "429":
          description: Too many requests
      tags:
        - public
  /join/activate:
    post:
      description: |
        Activate a pending join request.

        Creates a membership matching the request data.

        Email and password must match the email and password in the request.

        If success, removes the request from the database.

        Starts a session and returns a token, see /signin.
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INJoinActivate"
      produces:
        - application/json
      responses:
        "200":
          description: Membership activated. Extra, if present, carries data from join
          schema:
            $ref: "#/definitions/OUTJoinActivate"
        "400":
          description: Invalid data
        "401":
          description: Invalid email/password
        "404":
          description: Join request not found
        "429":
          description: Too many sessions
      tags:
        - public
  /signin:
    post:
      description: |
        Signin with email and password.

        The number of active sessions per email address is limited.

        Session has a time-to-live. A session can be renewed, reseting its TTL counter.
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INSignin"
      produces:
        - application/json
      responses:
        "200":
          description: Signed in
          schema:
            $ref: "#/definitions/OUTSignin"
        "400":
          description: Invalid data
        "401":
          description: Incorrect email/password
        "429":
          description: Too many sessions
      tags:
        - public
  /reset-password:
    post:
      description: |
        Create a reset password request.

        Sends an email with a link and instructions how to reset password.

        Ignored requests are purged from the database after a time-to-live period.

        The number of requests in total within a time period is limited per email address.
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INResetPassword"
      produces:
        - application/json
      responses:
        "201":
          description: Reset password request accepted
        "400":
          description: Invalid data
        "404":
          description: Unknown email
        "429":
          description: Too many requests
      tags:
        - public
  /reset-password/new:
    post:
      description: |
        Set new password.

        Removes the reset password request from the database.

        Email must match the email in the request.

        Starts a session and returns a token, see /signin.
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INNewPassword"
      produces:
        - application/json
      responses:
        "200":
          description: New password set, here is your data
          schema:
            $ref: "#/definitions/OUTNewPassword"
        "400":
          description: Invalid data
        "401":
          description: Emails do not match
        "404":
          description: Password reset equest not found
        "410":
          description: User with email not found
        "429":
          description: Too many sessions
      tags:
        - public
  /auth/session:
    patch:
      description: |
        Ping, renew a session.
      security:
        - ApiKeyAuth: []
      produces:
        - application/json
      responses:
        "200":
          description: Session renewed
        "401":
          description: Invalid token
        "404":
          description: Failed, session expired
      tags:
        - authorized
    delete:
      description: |
        Delete session: sign out.

        Token goes void, session data removed.
      security:
        - ApiKeyAuth: []
      produces:
        - application/json
      responses:
        "204":
          description: Session deleted, token void.
        "401":
          description: Invalid token
      tags:
        - authorized
  /auth/account:
    get:
      description: |
        Get account data.
      security:
        - ApiKeyAuth: []
      produces:
        - application/json
      responses:
        "200":
          description: Account data
          schema:
            $ref: "#/definitions/OUTAccount"
        "401":
          description: Invalid token
        "410":
          description: Failed, user gone?
      tags:
        - authorized
    put:
      description: |
        Update account data.
      security:
        - ApiKeyAuth: []
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INAccount"
      produces:
        - application/json
      responses:
        "200":
          description: Account data updated
          schema:
            $ref: "#/definitions/OUTAccount"
        "400":
          description: Invalid data
        "401":
          description: Invalid token
        "410":
          description: Failed, user gone?
      tags:
        - authorized
    delete:
      description: |
        Delete account.

        Beware: removes all data (sessions, account, user data) from the database.

        Devops based on backups.
      security:
        - ApiKeyAuth: []
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INDeleteAccount"
      produces:
        - application/json
      responses:
        "204":
          description: Account deleted
        "400":
          description: Invalid password
        "401":
          description: Invalid token
        "409":
          description: Incorrect password
        "410":
          description: Failed, user gone?
      tags:
        - authorized
  /auth/your-data:
    get:
      description: |
        Get user data.
      security:
        - ApiKeyAuth: []
      produces:
        - application/json
      responses:
        "200":
          description: Your data
          schema:
            $ref: "#/definitions/OUTUserData"
        "401":
          description: Invalid token
        "410":
          description: Failed, user gone?
      tags:
        - authorized
    # post:
    #   description: |
    #     EXPERIMENTAL: Update profile data.

    #     Proper key updates valid profile data and returns 200 OK.

    #     //go:build gotags_profile_keys
    #   security:
    #     - ApiKeyAuth: []
    #   parameters:
    #     - description: Input data
    #       in: body
    #       name: data
    #       required: true
    #       schema:
    #         $ref: "#/definitions/INProfile"
    #   produces:
    #     - application/json
    #   responses:
    #     "200":
    #       description: Profile data updated
    #       schema:
    #         $ref: "#/definitions/OUTProfile"
    #     "400":
    #       description: Invalid data
    #     "401":
    #       description: Invalid token
    #     "403":
    #       description: Incorrect key
    #     "410":
    #       description: Failed, user gone?
    #   tags:
    #     - authorized
  /auth/your-data/profile:
    post:
      description: |
        Set user profile.
      security:
        - ApiKeyAuth: []
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INProfile"
      produces:
        - application/json
      responses:
        "200":
          description: User data tags updated
          schema:
            $ref: "#/definitions/OUTUserData"
        "400":
          description: Invalid data
        "401":
          description: Invalid token
        "404":
          description: Invalid tag
        "410":
          description: Failed, user gone?
      tags:
        - authorized
  /auth/your-data/tags:
    post:
      description: |
        Add tags to user data.
      security:
        - ApiKeyAuth: []
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INUserTags"
      produces:
        - application/json
      responses:
        "200":
          description: User data tags updated
          schema:
            $ref: "#/definitions/OUTUserData"
        "400":
          description: Invalid data
        "401":
          description: Invalid token
        "404":
          description: Invalid tag
        "410":
          description: Failed, user gone?
      tags:
        - authorized
    delete:
      description: |
        Remove tags from your data.
      security:
        - ApiKeyAuth: []
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INDeleteUserTag"
      produces:
        - application/json
      responses:
        "200":
          description: User data tags updated
          schema:
            $ref: "#/definitions/OUTUserData"
        "400":
          description: Invalid password
        "401":
          description: Invalid token
        "410":
          description: Failed, user gone?
      tags:
        - authorized
  /auth/password:
    post:
      description: |
        Update password.
      security:
        - ApiKeyAuth: []
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INPassword"
      produces:
        - application/json
      responses:
        "200":
          description: Password changed
        "400":
          description: Invalid data
        "401":
          description: Invalid token
        "409":
          description: Incorrect password
        "410":
          description: Failed, user gone?
      tags:
        - authorized
  /auth/tags/{id}:
    get:
      description: |
        Get tag data.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Tag ID
      produces:
        - application/json
      responses:
        "200":
          description: Tag data
          schema:
            $ref: "#/definitions/OUTTag"
        "401":
          description: Invalid token
        "404":
          description: Tag not found
      tags:
        - authorized
    put:
      description: |
        Update tag data.
      security:
        - ApiKeyAuth: []
      parameters:
        - description: Input data
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/INTagData"
      produces:
        - application/json
      responses:
        "200":
          description: Tag data updated
          schema:
            $ref: "#/definitions/OUTTagData"
        "400":
          description: Invalid data
        "401":
          description: Invalid token
        "404":
          description: Tag not found
      tags:
        - authorized
  /debug/reset:
    post:
      description: |
        DEBUG API: reset database.

        //go:build gotags_debug_api
      produces:
        - application/json
      responses:
        "200":
          description: Database reset
      tags:
        - debug
  /debug/pending:
    get:
      description: |
        DEBUG API: get pending.

        //go:build gotags_debug_api
      produces:
        - application/json
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Category
      responses:
        "200":
          description: Pending items
          schema:
            $ref: "#/definitions/OUTDebugGetPending"
      tags:
        - debug
definitions:
  INJoinCheck:
    type: object
    properties:
      email:
        type: string
    required:
      - email
  OUTJoinCheck:
    type: object
    properties:
      email:
        type: string
    required:
      - email
  INJoin:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
      lang:
        type: string
      extra:
        oneOf:
          - type: string
          - type: object
    required:
      - name
      - email
      - password
  INJoinActivate:
    type: object
    properties:
      id:
        type: string
      email:
        type: string
      password:
        type: string
    required:
      - id
      - email
      - password
  OUTJoinActivate:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      data:
        type: object
      token:
        type: string
      extra:
        type: object
    required:
      - name
      - email
      - data
      - token
  INSignin:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
  OUTSignin:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      data:
        type: object
      token:
        type: string
  INResetPassword:
    type: object
    properties:
      email:
        type: string
      lang:
        type: string
    required:
      - email
  INNewPassword:
    type: object
    properties:
      id:
        type: string
      email:
        type: string
      password:
        type: string
    required:
      - id
      - email
      - password
  OUTNewPassword:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      data:
        type: object
      token:
        type: string
  INAccount:
    type: object
    properties:
      name:
        type: string
  OUTAccount:
    type: object
    properties:
      name:
        type: string
  INDeleteAccount:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
  INProfile:
    type: object
    properties:
      profile:
        type: object
      modified:
        type: string
    required:
      - profile
      - modified
  INProfileTag:
    type: object
    properties:
      tag:
        type: array
        items:
          type: string
    required:
      - tag
  OUTUserData:
    type: object
    properties:
      profile:
        type: object
      tags:
        type: array
        items:
          type: array
          items:
            type: string
          minItems: 4
          maxItems: 4
    required:
      - profile
      - tags
  INDeleteProfileTag:
    type: object
    properties:
      tags:
        type: array
        items:
          type: string
    required:
      - tag
  INPassword:
    type: object
    properties:
      password:
        type: string
      newPassword:
        type: string
    required:
      - password
      - newPassword
  OUTTag:
    type: object
    properties:
      name:
        type: string
      category:
        type: string
      data:
        type: object
    required:
      - name
      - category
      - data
  INTagData:
    type: object
  OUTTagData:
    type: object
  OUTDebugGetPending:
    type: object
    properties:
      pending:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            data:
              type: object
